# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "vm extension publish-version show",
)
class Show(AAZCommand):
    """Get information about a shared VM Extension Version.
    """

    _aaz_info = {
        "version": "2019-12-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/sharedvmextensions/{}/versions/{}", "2019-12-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.shared_vm_extension_name = AAZStrArg(
            options=["-n", "--name", "--shared-vm-extension-name"],
            help="The name of the shared VM Extension definition in which the Extension Version is to be created.",
            required=True,
            id_part="name",
        )
        _args_schema.shared_vm_extension_version_name = AAZStrArg(
            options=["--version", "--shared-vm-extension-version-name"],
            help="The name of the shared VM Extension Version to be created. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>",
            required=True,
            id_part="child_name_1",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SharedVmExtensionVersionsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SharedVmExtensionVersionsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sharedVmExtensions/{sharedVmExtensionName}/versions/{sharedVmExtensionVersionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "sharedVmExtensionName", self.ctx.args.shared_vm_extension_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "sharedVmExtensionVersionName", self.ctx.args.shared_vm_extension_version_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2019-12-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.block_role_upon_failure = AAZBoolType(
                serialized_name="blockRoleUponFailure",
            )
            properties.certificate = AAZObjectType()
            properties.compute_role = AAZStrType(
                serialized_name="computeRole",
            )
            properties.configuration = AAZObjectType()
            properties.disallow_major_version_upgrade = AAZBoolType(
                serialized_name="disallowMajorVersionUpgrade",
            )
            properties.endpoints = AAZObjectType()
            properties.is_internal_extension = AAZBoolType(
                serialized_name="isInternalExtension",
            )
            properties.local_resources = AAZListType(
                serialized_name="localResources",
            )
            properties.media_link = AAZStrType(
                serialized_name="mediaLink",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.regions = AAZListType()
            properties.replication_status = AAZObjectType(
                serialized_name="replicationStatus",
            )
            properties.rollback_supported = AAZBoolType(
                serialized_name="rollbackSupported",
            )
            properties.safe_deployment_policy = AAZStrType(
                serialized_name="safeDeploymentPolicy",
            )
            properties.supported_os = AAZStrType(
                serialized_name="supportedOS",
            )
            properties.supports_multiple_extensions = AAZBoolType(
                serialized_name="supportsMultipleExtensions",
            )

            certificate = cls._schema_on_200.properties.certificate
            certificate.store_location = AAZStrType(
                serialized_name="storeLocation",
            )
            certificate.store_name = AAZStrType(
                serialized_name="storeName",
            )
            certificate.thumbprint_algorithm = AAZStrType(
                serialized_name="thumbprintAlgorithm",
            )
            certificate.thumbprint_required = AAZBoolType(
                serialized_name="thumbprintRequired",
            )

            configuration = cls._schema_on_200.properties.configuration
            configuration.is_json_extension = AAZBoolType(
                serialized_name="isJsonExtension",
            )
            configuration.private_configuration_schema = AAZStrType(
                serialized_name="privateConfigurationSchema",
            )
            configuration.public_configuration_schema = AAZStrType(
                serialized_name="publicConfigurationSchema",
            )
            configuration.sample_config = AAZStrType(
                serialized_name="sampleConfig",
            )

            endpoints = cls._schema_on_200.properties.endpoints
            endpoints.input_endpoints = AAZListType(
                serialized_name="inputEndpoints",
            )
            endpoints.instance_input_endpoints = AAZListType(
                serialized_name="instanceInputEndpoints",
            )
            endpoints.internal_endpoints = AAZListType(
                serialized_name="internalEndpoints",
            )

            input_endpoints = cls._schema_on_200.properties.endpoints.input_endpoints
            input_endpoints.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.endpoints.input_endpoints.Element
            _element.local_port = AAZIntType(
                serialized_name="localPort",
            )
            _element.name = AAZStrType()
            _element.port = AAZIntType()
            _element.protocol = AAZStrType()

            instance_input_endpoints = cls._schema_on_200.properties.endpoints.instance_input_endpoints
            instance_input_endpoints.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.endpoints.instance_input_endpoints.Element
            _element.fixed_port_max = AAZIntType(
                serialized_name="fixedPortMax",
            )
            _element.fixed_port_min = AAZIntType(
                serialized_name="fixedPortMin",
            )
            _element.local_port = AAZIntType(
                serialized_name="localPort",
            )
            _element.name = AAZStrType()
            _element.protocol = AAZStrType()

            internal_endpoints = cls._schema_on_200.properties.endpoints.internal_endpoints
            internal_endpoints.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.endpoints.internal_endpoints.Element
            _element.name = AAZStrType()
            _element.port = AAZIntType()
            _element.protocol = AAZStrType()

            local_resources = cls._schema_on_200.properties.local_resources
            local_resources.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.local_resources.Element
            _element.name = AAZStrType()
            _element.size_in_mb = AAZIntType(
                serialized_name="sizeInMB",
            )

            regions = cls._schema_on_200.properties.regions
            regions.Element = AAZStrType()

            replication_status = cls._schema_on_200.properties.replication_status
            replication_status.aggregated_state = AAZStrType(
                serialized_name="aggregatedState",
                flags={"read_only": True},
            )
            replication_status.summary = AAZListType(
                flags={"read_only": True},
            )

            summary = cls._schema_on_200.properties.replication_status.summary
            summary.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.replication_status.summary.Element
            _element.details = AAZStrType(
                flags={"read_only": True},
            )
            _element.progress = AAZIntType(
                flags={"read_only": True},
            )
            _element.region = AAZStrType(
                flags={"read_only": True},
            )
            _element.state = AAZStrType(
                flags={"read_only": True},
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


__all__ = ["Show"]
