# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "vm extension publish create",
)
class Create(AAZCommand):
    """Create a Shared VM Extension.
    """

    _aaz_info = {
        "version": "2019-12-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/sharedvmextensions/{}", "2019-12-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.shared_vm_extension_name = AAZStrArg(
            options=["-n", "--name", "--shared-vm-extension-name"],
            help="The name of the Shared VM Extension. The allowed characters are alphabets and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.",
            required=True,
            id_part="name",
        )
        _args_schema.location = AAZResourceLocationArg(
            help="Resource location",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.company_name = AAZStrArg(
            options=["--company-name"],
            help="The company name of this Shared VM Extension.",
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            help="The description of this Shared VM Extension.",
        )
        _args_schema.eula = AAZStrArg(
            options=["--eula"],
            help="The Eula agreement for the Shared VM Extension.",
        )
        _args_schema.homepage_uri = AAZStrArg(
            options=["--homepage-uri"],
            help="The homepage uri.",
        )
        _args_schema.identifier = AAZObjectArg(
            options=["--identifier"],
            help="Describes the shared VM Extension unique identifier",
        )
        _args_schema.label = AAZStrArg(
            options=["--label"],
            help="The label of this Shared VM Extension.",
        )
        _args_schema.privacy_uri = AAZStrArg(
            options=["--privacy-uri"],
            help="The privacy statement uri.",
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Space-separated tags: key[=value] [key[=value] ...].",
        )

        identifier = cls._args_schema.identifier
        identifier.publisher = AAZStrArg(
            options=["publisher"],
            help="The name of the Shared VM Extension publisher.",
            required=True,
        )
        identifier.type = AAZStrArg(
            options=["type"],
            help="The name of the Shared VM Extension type.",
            required=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SharedVmExtensionsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SharedVmExtensionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sharedVmExtensions/{sharedVmExtensionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "sharedVmExtensionName", self.ctx.args.shared_vm_extension_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2019-12-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("companyName", AAZStrType, ".company_name")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("eula", AAZStrType, ".eula")
                properties.set_prop("homepageUri", AAZStrType, ".homepage_uri")
                properties.set_prop("identifier", AAZObjectType, ".identifier")
                properties.set_prop("label", AAZStrType, ".label")
                properties.set_prop("privacyUri", AAZStrType, ".privacy_uri")

            identifier = _builder.get(".properties.identifier")
            if identifier is not None:
                identifier.set_prop("publisher", AAZStrType, ".publisher", typ_kwargs={"flags": {"required": True}})
                identifier.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.company_name = AAZStrType(
                serialized_name="companyName",
            )
            properties.description = AAZStrType()
            properties.eula = AAZStrType()
            properties.homepage_uri = AAZStrType(
                serialized_name="homepageUri",
            )
            properties.identifier = AAZObjectType()
            properties.label = AAZStrType()
            properties.privacy_uri = AAZStrType(
                serialized_name="privacyUri",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            identifier = cls._schema_on_200_201.properties.identifier
            identifier.publisher = AAZStrType(
                flags={"required": True},
            )
            identifier.type = AAZStrType(
                flags={"required": True},
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


__all__ = ["Create"]
